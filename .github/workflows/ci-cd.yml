name: CI/CD Pipeline

# Trigger on pushes and pull requests to develop or main
on:
  push:
    branches: [ "develop", "main" ]
  pull_request:
    branches: [ "develop", "main" ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Node.js environment for backend and frontend
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Backend: Install dependencies and run tests
      - name: Install Backend Dependencies
        working-directory: backend
        run: npm install

      - name: Run Backend Tests
        working-directory: backend
        run: npm test   # Replace with your test command if available

      # Frontend: Install dependencies and build production assets
      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm install

      - name: Build Frontend
        working-directory: frontend
        run: npm run build

      # ML Microservice: Setup Python and install dependencies
      - name: Setup Python for ML
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install ML Dependencies
        working-directory: ml
        run: pip install -r requirements.txt

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Use SCP action to copy build artifacts to EC2
      - name: Copy Files to EC2 via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}               # e.g., ec2-xx-xx-xx-xx.compute-1.amazonaws.com
          username: ${{ secrets.EC2_USERNAME }}         # e.g., ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}               # Private key (set in GitHub Secrets)
          port: 22
          source: "backend/*, frontend/build/*"         # Adjust paths if necessary; you might zip your artifacts for simplicity
          target: "/home/${{ secrets.EC2_USERNAME }}/sentify-deploy/"

      # Use SSH action to execute deployment commands on the EC2 instance
      - name: Execute Deployment Commands on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd ~/sentify-deploy
            # For example, using PM2 to manage your Node.js backend:
            pm2 restart all || pm2 start server.js --name sentify-backend
            # Optionally, update web server configuration for the frontend build if needed
